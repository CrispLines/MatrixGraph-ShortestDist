import java.io.File;
import java.io.FileNotFoundException;
import java.io.PrintWriter;
import java.nio.file.Paths;
import java.util.*;

public class Assignment3 {
    public static void main(String[] args) {
        //declare scanner for user input
        Scanner in = new Scanner(System.in);
        System.out.print("Enter input file name: ");

        //get the user input and assign to file instance
        File inputFile = new File(in.nextLine());
        Scanner fileInput = null;
        try {
            fileInput = new Scanner(inputFile);
        } catch (FileNotFoundException e) {
            System.out.println("Error: Input file is not found!");
            System.exit(-1);
        }

        //read the first line of the file and split by "-" and store in an array
        String[] communities = fileInput.nextLine().split("-");

        //convert array of communities to a list
        List<String> communityList = Arrays.asList(communities);
        //sort the list
        Collections.sort(communityList);

        int n = communities.length;

        //create nxn matrix
        int[][] matrix = new int[n][n];

        //iterate and make diagonal of the matrix to 0 and other entries to maximum value
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < n; j++) {
                if (i == j) {
                    matrix[i][j] = 0;
                } else {
                    matrix[i][j] = Integer.MAX_VALUE;
                }
            }
        }

        //read file line by line
        while (fileInput.hasNextLine()) {
            String[] line = fileInput.nextLine().split("-");

            //there should be three entries per line, [weight,community1,community2]
            if (line.length != 3) {
                System.out.println("Error: line should have only three entries.");
                System.exit(-1);
            }

            int weight = Integer.parseInt(line[0]);
            String community1 = line[1];
            String community2 = line[2];

            //set the weight as corresponding matrix value, matrix[community1][community2]
            matrix[communityList.indexOf(community1)][communityList.indexOf(community2)] = weight;
            matrix[communityList.indexOf(community2)][communityList.indexOf(community1)] = weight;
        }

        fileInput.close();
        in.close();

        //Floyd-Warshall Algorithm
        for (int k = 0; k < n; k++) {
            for (int i = 0; i < n; i++) {
                for (int j = 0; j < n; j++) {
                    if (matrix[i][k] != Integer.MAX_VALUE && matrix[k][j] != Integer.MAX_VALUE) {
                        if (matrix[i][j] > matrix[i][k] + matrix[k][j]) {
                            matrix[i][j] = matrix[i][k] + matrix[k][j];
                        }
                    }
                }
            }
        }

        //get the directory of the input file
        String outputDir = inputFile.getAbsoluteFile().getParent();
        PrintWriter outFile = null;
        try {
            //create the output file as the same directory as the input file
            outFile = new PrintWriter(new File(String.valueOf(Paths.get(outputDir, "output.txt"))));
        } catch (FileNotFoundException e) {
            System.out.println("Error: Could not be able to write to the output file.");
            System.exit(-1);
        }

        //write to the output file
        for (int i = 0; i < n; i++) {
            for (int j = i + 1; j < n; j++) {
                if (i != j && matrix[i][j] != Integer.MAX_VALUE) {
                    outFile.println(communityList.get(i) + " , " + communityList.get(j) + " - " + matrix[i][j]);
                }
            }
        }
        System.out.println("Output file generated.");

        outFile.close();

    }
}
